{"ast":null,"code":"import * as e from \"react\";\nimport { useFormContext as r, get as n } from \"react-hook-form\";\n\nvar s = function (s) {\n  var t = s.as,\n      a = s.errors,\n      m = s.name,\n      o = s.message,\n      i = s.render,\n      l = function (e, r) {\n    if (null == e) return {};\n    var n,\n        s,\n        t = {},\n        a = Object.keys(e);\n\n    for (s = 0; s < a.length; s++) r.indexOf(n = a[s]) >= 0 || (t[n] = e[n]);\n\n    return t;\n  }(s, [\"as\", \"errors\", \"name\", \"message\", \"render\"]),\n      f = r(),\n      c = n(a || f.formState.errors, m);\n\n  if (!c) return null;\n  var g = c.message,\n      u = c.types,\n      d = Object.assign({}, l, {\n    children: g || o\n  });\n  return e.isValidElement(t) ? e.cloneElement(t, d) : i ? i({\n    message: g || o,\n    messages: u\n  }) : e.createElement(t || e.Fragment, d);\n};\n\nexport { s as ErrorMessage };","map":{"version":3,"mappings":";;;AAIMA,QAAe;EAAA,IAQnBC,QARmB;EAAA,IASnBC,YATmB;EAAA,IAUnBC,UAVmB;EAAA,IAWnBC,aAXmB;EAAA,IAYnBC,YAZmB;EAAA,IAahBC;IAAAA;IAAAA;IAAAA;IAAAA;IAAAA;;IAAAA;;IAAAA;EAAAA,mDAbgB;EAAA,IAebC,IAAUC,GAfG;EAAA,IAgBbC,IAAQC,EAAIR,KAAUK,EAAQI,SAARJ,CAAkBL,MAAhCQ,EAAwCP,CAAxCO,CAhBK;;EAkBnB,KAAKD,CAAL,EACE;EAAA,IAGeG,IAA+BH,EAAxCL,OAHN;EAAA,IAGoCS,IAAUJ,EAAVI,KAHpC;EAAA,IAIIC,IAAQC,OAAOC,MAAPD,CAAc,EAAdA,EAAkBT,CAAlBS,EAAwB;IACpCE,UAAUL,KAAuBR;EADG,CAAxBW,CAJZ;EAQF,OAAOG,EAAMC,cAAND,CAAqBjB,CAArBiB,IACHA,EAAME,YAANF,CAAmBjB,CAAnBiB,EAAuBJ,CAAvBI,CADGA,GAEHb,IACCA,EAAO;IACND,SAASQ,KAAuBR,CAD1B;IAENiB,UAAUR;EAFJ,CAAPR,CADDA,GAKAa,EAAMI,aAANJ,CAAqBjB,KAAiBiB,EAAMK,QAA5CL,EAAsDJ,CAAtDI,CAPJ;AAO0DJ,CAlCtDd;;AAkCsDc","names":["ErrorMessage","as","errors","name","message","render","rest","methods","useFormContext","error","get","formState","messageFromRegister","types","props","Object","assign","children","React","isValidElement","cloneElement","messages","createElement","Fragment"],"sources":["E:\\Kodpit\\kodpit\\node_modules\\@hookform\\error-message\\src\\ErrorMessage.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useFormContext, get, FieldErrors } from 'react-hook-form';\nimport { Props } from './types';\n\nconst ErrorMessage = <\n  TFieldErrors extends FieldErrors,\n  TAs extends\n    | undefined\n    | React.ReactElement\n    | React.ComponentType<any>\n    | keyof JSX.IntrinsicElements = undefined\n>({\n  as,\n  errors,\n  name,\n  message,\n  render,\n  ...rest\n}: Props<TFieldErrors, TAs>) => {\n  const methods = useFormContext();\n  const error = get(errors || methods.formState.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  const { message: messageFromRegister, types } = error;\n  const props = Object.assign({}, rest, {\n    children: messageFromRegister || message,\n  });\n\n  return React.isValidElement(as)\n    ? React.cloneElement(as, props)\n    : render\n    ? (render({\n        message: messageFromRegister || message,\n        messages: types,\n      }) as React.ReactElement)\n    : React.createElement((as as string) || React.Fragment, props);\n};\n\nexport { ErrorMessage };\n"]},"metadata":{},"sourceType":"module"}